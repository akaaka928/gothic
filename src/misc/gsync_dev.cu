/*************************************************************************\
 *                                                                       *
                  last updated on 2016/12/06(Tue) 12:34:33
 *                                                                       *
 *    Utility tool for inter-block GPU synchronization                   *
 *         based on GPU Lock-Free Synchronization by Xiao & Feng 2009    *
 *                                                                       *
 *                                                                       *
 *                                                                       *
 *                                             written by Yohei MIKI     *
 *                                                                       *
\*************************************************************************/
//-------------------------------------------------------------------------
#ifndef GSYNC_DEV_CU
#define GSYNC_DEV_CU
//-------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <helper_cuda.h>
//-------------------------------------------------------------------------
#include "macro.h"
#include "cudalib.h"
//-------------------------------------------------------------------------


//-------------------------------------------------------------------------
/* Inter-Block GPU Synchronization */
/* based on GPU Lock-Free Synchronization by Xiao & Feng 2009 */
//-------------------------------------------------------------------------
/* tidx: thread index within a block */
/* bidx:  block index */
//-------------------------------------------------------------------------
__device__ __forceinline__ void globalSync(const int tidx, const int bidx, const int bnum, volatile int * gsync0, volatile int * gsync1)
{
  //-----------------------------------------------------------------------
  /* Phase 0. tell */
  //-----------------------------------------------------------------------
  __syncthreads();
  if( tidx == 0 )
    gsync0[bidx] = 1;
  //-----------------------------------------------------------------------
#if 0
  if( tidx == 0 )
    printf("%2d/%d waits for synchronization...\n", bidx, bnum);
#endif
  //-----------------------------------------------------------------------

  //-----------------------------------------------------------------------
  /* Phase 1. watch */
  //-----------------------------------------------------------------------
  if( bidx == 0 ){
    //---------------------------------------------------------------------
#if 1
    for(int ii = tidx; ii < bnum; ii += BLOCKDIM_X1D)
      while( true ){
  	if( gsync0[ii] ){
  	  gsync0[ii] = 0;
  	  break;
  	}
      }
#else
    /* assume that (# of threads per block) >= (# of blocks) */
    if( tidx < bnum )
      while( true ){
    	if( gsync0[tidx] ){
    	  gsync0[tidx] = 0;
    	  break;
    	}
      }
#endif
    //---------------------------------------------------------------------
    __syncthreads();
    //---------------------------------------------------------------------
#if 1
    for(int ii = tidx; ii < bnum; ii += BLOCKDIM_X1D)
      gsync1[ii] = 1;
#else
    /* assume that (# of threads per block) >= (# of blocks) */
    if( tidx < bnum )
      gsync1[tidx] = 1;
#endif
    //---------------------------------------------------------------------
  }
  //-----------------------------------------------------------------------

  //-----------------------------------------------------------------------
  /* Phase 2. check */
  //-----------------------------------------------------------------------
  if( tidx == 0 )
    while( true ){
      if( gsync1[bidx] ){
  	gsync1[bidx] = 0;
  	break;
      }
    }
  //-----------------------------------------------------------------------
  __syncthreads();
  //-----------------------------------------------------------------------
#if 0
  if( tidx == 0 )
    printf("%2d/%d released from synchronization.\n", bidx, bnum);
#endif
  //-----------------------------------------------------------------------
}
//-------------------------------------------------------------------------


//-------------------------------------------------------------------------
/* initialize arrays for inter-block GPU synchronization */
//-------------------------------------------------------------------------
__global__ static void initGsync_kernel(const int num, int * RESTRICT gsync0, int * RESTRICT gsync1)
{
  //-----------------------------------------------------------------------
  const int gidx = GLOBALIDX_X1D;
  //-----------------------------------------------------------------------
  if( gidx < num ){
    //---------------------------------------------------------------------
    gsync0[gidx] = 0;
    gsync1[gidx] = 0;
    //---------------------------------------------------------------------
  }
  //-----------------------------------------------------------------------
}
//-------------------------------------------------------------------------
#endif//GSYNC_DEV_CU
//-------------------------------------------------------------------------
