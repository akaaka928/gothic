# submit multiple jobs by using Xcrypt

# Xcrypt specific settings
use base qw(limit core);
use File::Copy;
limit::initialize(1);# sequential run

# global settings
$id_name = "hunt_misc";
$num_trials = 1;

# list of parameters in GOTHIC
my @list_Ttot = (512, 256, 128, 1024);
my @list_Tsub = (32, 16, 8, 4, 2, 1);
my @list_ws = (1, 0);
my @list_wr = (1, 0);
my @list_sm = (1, 0);
$num_Ttot = scalar @list_Ttot;
$num_Tsub = scalar @list_Tsub;
$num_ws = scalar @list_ws;
$num_wr = scalar @list_wr;
$num_sm = scalar @list_sm;

# modules settings for Aquarius
require "/usr/share/Modules/init/perl.pm";
&module('purge');
&module('load', 'cuda', 'gcc', 'ompi-cuda');
&module('use', '/work/gr16/share/modules/lib');
&module('load', 'phdf5', 'cub');

# compilation
my $bin = "bin";
my @target = ();
for(local $Ttot = 0; $Ttot < $num_Ttot; $Ttot++){
	for(local $Tsub = 0; $Tsub < $num_Tsub; $Tsub++){
		for(local $ws = 0; $ws < $num_ws; $ws++){
			for(local $wr = 0; $wr < $num_wr; $wr++){
				for(local $sm = 0; $sm < $num_sm; $sm++){
					local $exec = sprintf("tot%04dsub%02dws%dwr%dsm%d", $list_Ttot[$Ttot], $list_Tsub[$Tsub], $list_ws[$ws], $list_wr[$wr], $list_sm[$sm]);
					`make gothic MEASURE_ELAPSED_TIME=1 HUNT_OPTIMAL_WALK_TREE=0 HUNT_OPTIMAL_INTEGRATE=0 HUNT_OPTIMAL_MAKE_TREE=1 HUNT_OPTIMAL_MAKE_NODE=1 HUNT_OPTIMAL_NEIGHBOUR=1 HUNT_OPTIMAL_SEPARATION=0 NUM_NTHREADS=$list_Ttot[$Ttot] NUM_TSUB=$list_Tsub[$Tsub] USE_WARPSHUFFLE=$list_ws[$ws] USE_WARPREDUCE=$list_wr[$wr] PREF_SHARED_MEM=$list_sm[$sm] ADOPT_GADGET_TYPE_MAC=1`;
					if(-e "bin/gothic"){
						`mv bin/gothic $bin/$exec`;
						push(@target, $exec);
					}
					`make clean`;
				}
			}
		}
	}
}
$num_target = scalar @target;


# Xcrypt specific settings
%template = (
	'id' => "$id_name",
	'RANGE0' => [0..$num_target-1],
	'RANGE1' => [0..$num_trials-1],

	# commands executed on compute node
	# module settings
	'exe0' => 'module purge',
	'exe1' => 'module load cuda gcc ompi-cuda',
	'exe2' => 'module use /work/gr16/share/modules/lib',
	'exe3' => 'module load phdf5 cub',
	'exe4' => 'module list',
	# job execution
	'exe5'    => 'numactl --localalloc',
	'arg5_0@' => sub{"$bin/$target[$VALUE[0]]"},
	'arg5_1'  => '-absErr=1.953125000e-3',
	'arg5_2'  => '-file=m31',
	'arg5_3@' => sub{"-jobID=$VALUE[0]"},
	'arg5_4@' => sub{"1>>log/$target[$VALUE[0]]_$VALUE[0].log"},
	'arg5_5@' => sub{"2>>log/$target[$VALUE[0]]_$VALUE[0].err"},

	# commands executed before job submission
	'before' => sub{
		print "launch $self->{id}\n";
	},
	'after' => sub{
		print "finish $self->{id}\n";
	},

	# settings for job script
	'JS_queue' => 'share',
	'JS_gpu' => '1',
	'JS_limit_time' => '00:05:00'
);
prepare_submit_sync(%template);
