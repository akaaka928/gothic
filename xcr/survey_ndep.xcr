# submit multiple jobs by using Xcrypt

# Xcrypt specific settings
use base qw(limit core);
use File::Copy;
limit::initialize(1);# sequential run

# global settings
$id_name = "survey_ndep";
my $series = "m31";

# configuration of Aquarius
$GPUs_per_node = 8;
$GPUs_per_socket = 4;

# usage of Aquarius
$num_nodes = 1;
$num_procs = $num_nodes * $GPUs_per_node;

# list up the total number of N-body particles and set iteration counts
my @Ntot_list = ("N001k", "N002k", "N004k", "N008k", "N016k", "N032k", "N064k", "N128k", "N256k", "N512k", "N001M", "N002M", "N004M", "N008M", "N016M", "N032M");
$num_Ntot = scalar @Ntot_list;
my $Ngroup = 3;
my @head_list = (0, 12, 16);
my @iter_list = (1024 / $num_procs, 128 / $num_procs, 16 / $num_procs);
my @num_list = ();
for(local $i = 0; $i < $Ngroup-1; $i++){
	push @num_list, $head_list[$i+1] - $head_list[$i];
}
push @num_list, $num_Ntot - $head_list[$Ngroup - 1];

# set file list
my @file_list = ();
for(local $i = 0; $i < $num_Ntot; $i++){
	push @file_list, $series . '_' . $Ntot_list[$i];
}


# Xcrypt specific settings
%template = (
	'id' => "$id_name",
	'RANGE0' => [0..$Ngroup-1],
	'RANGE1@' => sub{"[0..$num_list[$VALUE[0]]-1]"},
	'RANGE2@' => sub{"[0..$iter_list[$VALUE[0]]-1]"},

	# commands executed on compute node
	# module settings
	'exe0' => 'module purge',
	'exe1' => 'module load cuda gcc ompi-cuda',
	'exe2' => 'export MODULEPATH=/work/gr16/share/modules/lib:$MODULEPATH',
	'exe3' => 'module load phdf5 cub',
	'exe4' => 'module list',
	# job execution
	'exe5@'   => sub{"mpiexec -machinefile \$PJM_O_NODEINF -n \$PJM_MPI_PROC -npernode $GPUs_per_node sh/wisteria/split_gpu_benchmark.sh"},
	'arg5_0@' => sub{"--wrapper-Nprocs_node=$GPUs_per_node"},
	'arg5_1@' => sub{"--wrapper-Nprocs_socket=$GPUs_per_socket"},
	'arg5_2@' => sub{"--wrapper-series=$file_list[$head_list[$VALUE[0]]+$VALUE[1]]"},
	'arg5_3'  => '--wrapper-logdir=log',
	'arg5_4@' => sub{"--wrapper-packetID=$VALUE[2]"},
	'arg5_5'  => 'bin/gothic',
	'arg5_6'  => '-absErr=1.953125000e-3',

	# commands executed before job submission
	'before' => sub{
		print "launch $self->{id}\n";
	},
	'after' => sub{
		print "finish $self->{id}\n";
	},

	# settings for job script
	'JS_queue' => 'short-a',
	'JS_phnode@' => sub{"$num_nodes"},# number of nodes
	'JS_node@' => sub{"$num_procs"}# number of MPI processes
	# 'JS_limit_time' => '00:03:00'
);
prepare_submit_sync(%template);
